// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tapmonrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TapmonClient is the client API for Tapmon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TapmonClient interface {
	GetMon(ctx context.Context, in *GetMonRequest, opts ...grpc.CallOption) (*GetMonResponse, error)
	ListOwnedMons(ctx context.Context, in *ListOwnedMonsRequest, opts ...grpc.CallOption) (*ListOwnedMonsResponse, error)
	ListAllMons(ctx context.Context, in *ListAllMonsRequest, opts ...grpc.CallOption) (*ListAllMonsResponse, error)
	MintMon(ctx context.Context, in *MintMonRequest, opts ...grpc.CallOption) (*MintMonResponse, error)
	LevelMon(ctx context.Context, in *LevelMonRequest, opts ...grpc.CallOption) (*LevelMonResponse, error)
}

type tapmonClient struct {
	cc grpc.ClientConnInterface
}

func NewTapmonClient(cc grpc.ClientConnInterface) TapmonClient {
	return &tapmonClient{cc}
}

func (c *tapmonClient) GetMon(ctx context.Context, in *GetMonRequest, opts ...grpc.CallOption) (*GetMonResponse, error) {
	out := new(GetMonResponse)
	err := c.cc.Invoke(ctx, "/tapmonrpc.Tapmon/GetMon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapmonClient) ListOwnedMons(ctx context.Context, in *ListOwnedMonsRequest, opts ...grpc.CallOption) (*ListOwnedMonsResponse, error) {
	out := new(ListOwnedMonsResponse)
	err := c.cc.Invoke(ctx, "/tapmonrpc.Tapmon/ListOwnedMons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapmonClient) ListAllMons(ctx context.Context, in *ListAllMonsRequest, opts ...grpc.CallOption) (*ListAllMonsResponse, error) {
	out := new(ListAllMonsResponse)
	err := c.cc.Invoke(ctx, "/tapmonrpc.Tapmon/ListAllMons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapmonClient) MintMon(ctx context.Context, in *MintMonRequest, opts ...grpc.CallOption) (*MintMonResponse, error) {
	out := new(MintMonResponse)
	err := c.cc.Invoke(ctx, "/tapmonrpc.Tapmon/MintMon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapmonClient) LevelMon(ctx context.Context, in *LevelMonRequest, opts ...grpc.CallOption) (*LevelMonResponse, error) {
	out := new(LevelMonResponse)
	err := c.cc.Invoke(ctx, "/tapmonrpc.Tapmon/LevelMon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TapmonServer is the server API for Tapmon service.
// All implementations must embed UnimplementedTapmonServer
// for forward compatibility
type TapmonServer interface {
	GetMon(context.Context, *GetMonRequest) (*GetMonResponse, error)
	ListOwnedMons(context.Context, *ListOwnedMonsRequest) (*ListOwnedMonsResponse, error)
	ListAllMons(context.Context, *ListAllMonsRequest) (*ListAllMonsResponse, error)
	MintMon(context.Context, *MintMonRequest) (*MintMonResponse, error)
	LevelMon(context.Context, *LevelMonRequest) (*LevelMonResponse, error)
	mustEmbedUnimplementedTapmonServer()
}

// UnimplementedTapmonServer must be embedded to have forward compatible implementations.
type UnimplementedTapmonServer struct {
}

func (UnimplementedTapmonServer) GetMon(context.Context, *GetMonRequest) (*GetMonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMon not implemented")
}
func (UnimplementedTapmonServer) ListOwnedMons(context.Context, *ListOwnedMonsRequest) (*ListOwnedMonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwnedMons not implemented")
}
func (UnimplementedTapmonServer) ListAllMons(context.Context, *ListAllMonsRequest) (*ListAllMonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllMons not implemented")
}
func (UnimplementedTapmonServer) MintMon(context.Context, *MintMonRequest) (*MintMonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintMon not implemented")
}
func (UnimplementedTapmonServer) LevelMon(context.Context, *LevelMonRequest) (*LevelMonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LevelMon not implemented")
}
func (UnimplementedTapmonServer) mustEmbedUnimplementedTapmonServer() {}

// UnsafeTapmonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TapmonServer will
// result in compilation errors.
type UnsafeTapmonServer interface {
	mustEmbedUnimplementedTapmonServer()
}

func RegisterTapmonServer(s grpc.ServiceRegistrar, srv TapmonServer) {
	s.RegisterService(&Tapmon_ServiceDesc, srv)
}

func _Tapmon_GetMon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapmonServer).GetMon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapmonrpc.Tapmon/GetMon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapmonServer).GetMon(ctx, req.(*GetMonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tapmon_ListOwnedMons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnedMonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapmonServer).ListOwnedMons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapmonrpc.Tapmon/ListOwnedMons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapmonServer).ListOwnedMons(ctx, req.(*ListOwnedMonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tapmon_ListAllMons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllMonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapmonServer).ListAllMons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapmonrpc.Tapmon/ListAllMons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapmonServer).ListAllMons(ctx, req.(*ListAllMonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tapmon_MintMon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintMonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapmonServer).MintMon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapmonrpc.Tapmon/MintMon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapmonServer).MintMon(ctx, req.(*MintMonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tapmon_LevelMon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LevelMonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapmonServer).LevelMon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapmonrpc.Tapmon/LevelMon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapmonServer).LevelMon(ctx, req.(*LevelMonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tapmon_ServiceDesc is the grpc.ServiceDesc for Tapmon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tapmon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tapmonrpc.Tapmon",
	HandlerType: (*TapmonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMon",
			Handler:    _Tapmon_GetMon_Handler,
		},
		{
			MethodName: "ListOwnedMons",
			Handler:    _Tapmon_ListOwnedMons_Handler,
		},
		{
			MethodName: "ListAllMons",
			Handler:    _Tapmon_ListAllMons_Handler,
		},
		{
			MethodName: "MintMon",
			Handler:    _Tapmon_MintMon_Handler,
		},
		{
			MethodName: "LevelMon",
			Handler:    _Tapmon_LevelMon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tapmonrpc.proto",
}
